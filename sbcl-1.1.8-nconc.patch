diff -up sbcl-1.1.8/NEWS.nconc sbcl-1.1.8/NEWS
--- sbcl-1.1.8/NEWS.nconc	2013-06-02 07:12:39.000000000 -0600
+++ sbcl-1.1.8/NEWS	2013-06-03 08:41:26.204828114 -0600
@@ -1,4 +1,7 @@
 ;;;; -*- coding: utf-8; fill-column: 78 -*-
+changes relative to sbcl-1.1.8:
+  * bug fix: problems with NCONC type derivation (reported by Jerry James).
+
 changes in sbcl-1.1.8 relative to sbcl-1.1.7:
   * notice: The implementation of MAP-ALLOCATED-OBJECTS (the heart of
     ROOM, plus a few SB-INTROSPECT functions) has been completely
diff -up sbcl-1.1.8/src/compiler/srctran.lisp.nconc sbcl-1.1.8/src/compiler/srctran.lisp
--- sbcl-1.1.8/src/compiler/srctran.lisp.nconc	2013-06-02 07:12:41.000000000 -0600
+++ sbcl-1.1.8/src/compiler/srctran.lisp	2013-06-03 08:43:46.051712111 -0600
@@ -176,15 +176,11 @@
             (loop for (arg next) on args
                   while next
                   do
-                  (let ((lvar-type (lvar-type arg)))
-                    (unless (or (csubtypep list-type lvar-type)
-                                (csubtypep lvar-type list-type)
-                                ;; Check for NIL specifically, because
-                                ;; SYMBOL or ATOM won't satisfie the above
-                                (csubtypep null-type lvar-type))
-                      (assert-lvar-type arg list-type
-                                        (lexenv-policy *lexenv*))
-                      (return *empty-type*))))
+                  (when (eq (type-intersection (lvar-type arg) list-type)
+                            *empty-type*)
+                    (assert-lvar-type arg list-type
+                                      (lexenv-policy *lexenv*))
+                    (return *empty-type*)))
             (loop with all-nil = t
                   for (arg next) on args
                   for lvar-type = (lvar-type arg)
@@ -192,7 +188,7 @@
                   do
                   (cond
                     ;; Cons in the middle guarantees the result will be a cons
-                    ((csubtypep lvar-type cons-type)
+                    ((not (csubtypep null-type lvar-type))
                      (return cons-type))
                     ;; If all but the last are NIL the type of the last arg
                     ;; can be used
diff -up sbcl-1.1.8/tests/compiler.pure.lisp.nconc sbcl-1.1.8/tests/compiler.pure.lisp
--- sbcl-1.1.8/tests/compiler.pure.lisp.nconc	2013-06-02 07:12:42.000000000 -0600
+++ sbcl-1.1.8/tests/compiler.pure.lisp	2013-06-03 08:45:07.387680722 -0600
@@ -4410,7 +4410,13 @@
             (lambda (x y) (nconc x (the list y) x)) t
             (lambda (x y) (nconc (the atom x) y)) t
             (lambda (x y) (nconc (the (or null (eql 10)) x) y)) t
-            (lambda (x y) (print (length y)) (append x y)) sequence)))
+            (lambda (x y) (nconc (the (or cons vector) x) y)) cons
+            (lambda (x y) (nconc (the sequence x) y)) t
+            (lambda (x y) (print (length y)) (append x y)) sequence
+            (lambda (x y) (print (length y)) (append x y)) sequence
+            (lambda (x y) (append (the (member (a) (b)) x) y)) cons
+            (lambda (x y) (append (the (member (a) (b) c) x) y)) cons
+            (lambda (x y) (append (the (member (a) (b) nil) x) y)) t)))
     (loop for (function result-type) on test-cases by #'cddr
           do (assert (equal (car (cdaddr (sb-kernel:%simple-fun-type
                                           (compile nil function))))
